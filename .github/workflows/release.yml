name: Release to PyPI

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag-version: ${{ steps.get-version.outputs.tag-version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Get version information
      id: get-version
      run: |
        # Extract version from pyproject.toml
        PROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        TAG_VERSION=${GITHUB_REF#refs/tags/v}

        echo "version=$PROJECT_VERSION" >> $GITHUB_OUTPUT
        echo "tag-version=$TAG_VERSION" >> $GITHUB_OUTPUT

        echo "Project version: $PROJECT_VERSION"
        echo "Tag version: $TAG_VERSION"

    - name: Validate version match
      run: |
        if [ "${{ steps.get-version.outputs.version }}" != "${{ steps.get-version.outputs.tag-version }}" ]; then
          echo "Version mismatch!"
          echo "   pyproject.toml: ${{ steps.get-version.outputs.version }}"
          echo "   Git tag: v${{ steps.get-version.outputs.tag-version }}"
          echo "   Please ensure pyproject.toml version matches the git tag"
          exit 1
        fi
        echo "Version validation passed"

    - name: Check if version already exists on PyPI
      run: |
        pip install requests
        python -c "
        import requests
        import sys

        version = '${{ steps.get-version.outputs.version }}'
        url = f'https://pypi.org/pypi/maptor/{version}/json'
        response = requests.get(url)

        if response.status_code == 200:
            print(f'Version {version} already exists on PyPI!')
            sys.exit(1)
        else:
            print(f'Version {version} is new - ready to publish')
        "

  build:
    needs: validate-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        echo "Building package..."
        python -m build

        echo "Build artifacts:"
        ls -la dist/

        echo "Package info:"
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  test-package:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Test package installation
      run: |
        echo "Testing package installation..."
        pip install dist/*.whl

        echo "Testing import:"
        python -c "
        import maptor
        print(f'âœ“ MAPTOR version: {maptor.__version__}')
        "

  publish-to-pypi:
    needs: [validate-release, build, test-package]
    runs-on: ubuntu-latest
    environment: pypi
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        print-hash: true

  create-github-release:
    needs: [validate-release, publish-to-pypi]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: MAPTOR v${{ needs.validate-release.outputs.version }}
        body: |
          ## MAPTOR v${{ needs.validate-release.outputs.version }}

          **Installation:**
          ```bash
          pip install maptor==${{ needs.validate-release.outputs.version }}
          ```

          **Changes:**
          - See commit history for detailed changes

          **Verification:**
          ```python
          import maptor
          print(maptor.__version__)
          ```
        draft: false
        prerelease: false
